# read nodes and ties data into variables
#nodes<- read.csv("nodes.csv")
#ties<- read.csv("ties.csv")
#OR load data
data<-read.csv("file.choose()", header=T)
----------------# Social Network Analysis #----------------------
## Building the Network ------------------------------
# load packages for exploration
require(igraph)
library(tnet)
# read nodes and ties data into variables
#nodes<- read.csv("nodes.csv")
#ties<- read.csv("ties.csv")
#OR load data
data<-read.csv("file.choose()", header=T)
# read nodes and ties data into variables
#nodes<- read.csv("nodes.csv")
#ties<- read.csv("ties.csv")
#OR load data
data<-read.csv(file.choose(), header=T)
#extract two cols and create a dataframe
y<-data.frame(data$first, data$second)
#create a network graph
netG<-graph.data.frame(y,directed=F)
#explore the set of nodes
V(netG)
vcount(g)               #print/display vertices/nodes
vcount(netG)               #print/display vertices/nodes
V(netG)$label<-V(netG)$name     #label the vertex
V(netG)$label
vcount(netG)
#explore the set of ties
E(netG)
ecount(netG)               #print number of ties
g$name<-"M Network"
# add the name attribute "M Network" to the network and print it
netG$name<-"M Network"
netG$name
V(g)$id<1:vcount(netG)
# add node attribute id and print the node 'id' attribute
V(netG)$id<1:vcount(netG)
V(netG)$id
V(netG)$id<-1:vcount(netG)
V(netG)$id<
V(netG)$id
id
V(netG)$id
#Examine atributes
# print the tie/edge's 'weight' attribute
E(netG)$weight
#Examine atributes
# print the tie/edge's 'weight' attribute
E(netG)$second
edge_attr(netG)
vertex_attr(netG)
graph_attr(netG)
# View the properties of network:
Summary(netG)
# View the properties of network:
Summary(data)
# View the properties of network:
summary(netG)
#Diameter
diameter(g, directed,weights = NA)
#Diameter
diameter(netG, directed,weights = NA)
#Diameter
diameter(netG, directed=F,weights = NA)
# Degree
degree<-degree(netG, V=v(g), mode = 'all', normalized= F)
# Degree
degree<-degree(netG, V=v(netG), mode = 'all', normalized= F)
# Degree
degree<-degree(netG, V=V(netG), mode = 'all', normalized= F)
# Degree
degree<-degree(netG, v=V(netG), mode = 'all', normalized= F)
degree
V(g)$degree<-degree(netG)
V(netG)$degree<-degree(netG)
V(netG)$degree<
V(netG)$degree
V(netG)$degree<-degree(netG)
V(netG)$degree
hist(V(net)$degree,
col='yellow',
main='Histogram of Node Degree',
ylab= 'Number of Nodes',
xlab='Degree of Nodes')
hist(V(netG)$degree,
col='yellow',
main='Histogram of Node Degree',
ylab= 'Number of Nodes',
xlab='Degree of Nodes')
set.seed(222)
plot(data,
vertex.color= 'green',
vertex.size=2,
edge.color='red',
edge.arrow.size=0.1,
vertex.label.cex=0.8)
plot(netG,
vertex.color= 'green',
vertex.size=2,
edge.color='red',
edge.arrow.size=0.1,
vertex.label.cex=0.8)
#weighted details are in this chart
plot(net,
vertex.color= rainboc(52),
vertex.size=Vnet$degree*0.4,
edge.arrow.size=0.1,
layout = layout.fruchterman.reingold)
#weighted details are in this chart
plot(netG,
vertex.color= rainboc(52),
vertex.size=Vnet$degree*0.4,
edge.arrow.size=0.1,
layout = layout.fruchterman.reingold)
plot(netG,
vertex.color= rainbow(52),
vertex.size=Vnet$degree*0.4,
edge.arrow.size=0.1,
layout = layout.fruchterman.reingold)
plot(netG,
vertex.color= rainbow(52),
vertex.size=V(netG)$degree*0.4,
edge.arrow.size=0.1,
layout = layout.fruchterman.reingold)
edge_density(netG, loops=F)
ecount(g)/vcount(g)*(vcount(g)-1)
ecount(netG)/vcount(netG)*(vcount(netG)-1)
ecount(netG)/vcount(netG)*(vcount(netG)-1)/2
density(netG)
ecount(netG)
vcount(netG)*(vcount(netG)-1)/2
ecount(netG)/vcount(netG)*(vcount(netG)-1)/2
ecount(netG)/vcount(netG)*(vcount(netG)-1)
ecount(netG)
vcount(netG)
GC<-clustering_w(netG, measure = c("bi", "am", "gm","ma","mi"))
#Global Clustering
GC<-clustering_w(data, measure = c("bi", "am", "gm","ma","mi"))
# read nodes and ties data into variables
#nodes<- read.csv("nodes.csv")
#ties<- read.csv("ties.csv")
#OR load data
data<-read.csv(file.choose(), header=T)
#create a network graph
netG<-graph.data.frame(data,directed=F)
netG
#explore the set of nodes
V(netG)
vcount(netG)               #print/display vertices/nodes
V(netG)$label<-V(netG)$name     #label the vertex
#explore the set of ties
E(netG)
ecount(netG)               #print number of ties
# add the name attribute "M Network" to the network and print it
netG$name<-"M Network"
edge_attr(netG)
edge_attr(netG)
V(netG)$label<-V(netG)$name     #label the vertex
netG
# Diameter
diameter(netG, directed=F,weights = NA)
# Degree
degree<-degree(netG, v=V(netG), mode = 'all', normalized= F)
degree
# Degree
#degree<-degree(netG, v=V(netG), mode = 'all', normalized= F)
degree<-degree(netG, mode = 'all', normalized= F)
degree
# Degree
#degree<-degree(netG, v=V(netG), mode = 'all', normalized= F)
degree<-degree(netG)
degree
degree<-degree_w(netG)
# Degree
#degree<-degree(netG, v=V(netG), mode = 'all', normalized= F)
degree<-degree_tm(netG)
netF
netG
#create a network graph
netG<-graph.data.frame(y,directed=F)
degree<-degree_w(netG)
#create a network graph
netG<-graph.data.frame(y,directed=F)
netG
y<-data.frame(data$first, data$second)
#create a network graph
netG<-graph.data.frame(y,directed=F)
degree<-degree_w(netG)
data
y<-data.frame(data$first, data$second)
#create a network graph
netG<-graph.data.frame(y,directed=F)
degree<-degree_w(netG)
netG
# Degree
degree<-degree(netG, v=V(netG), mode = 'all', normalized= F)
degree
----------------# Social Network Analysis #----------------------
## Building the Network ------------------------------
# load packages for exploration
require(igraph)
library(tnet)
# read nodes and ties data into variables
#nodes<- read.csv("nodes.csv")
#ties<- read.csv("ties.csv")
#OR load data
data<-read.csv(file.choose(), header=T)
# read nodes and ties data into variables
#nodes<- read.csv("nodes.csv")
#ties<- read.csv("ties.csv")
#OR load data
data<-read.csv(file.choose(), header=T)
#create a network graph
plot(data)
#create a network graph
netG<-graph.data.frame(data,directed=F)
#Network Diagram only shows Connections
set.seed(222)
plot(netG,
vertex.color= 'green',
vertex.size=10,
edge.color='red',
edge.arrow.size=0.1,
vertex.label.cex=0.8)
plot(net)
plot(netG)
